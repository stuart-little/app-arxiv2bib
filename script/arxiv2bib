#!/usr/bin/env perl
use warnings;
use v5.20;

use feature qw(signatures);
no warnings qw(experimental::signatures);

use Data::Dumper;
use Getopt::Long;
use Mojo::UserAgent;
use Pod::Usage;

my($help,$man,$dry,$verbose);
my($sortBy,$sortOrder) = qw(submittedDate descending);
my($id_list,$start,$max_results) = ("",0,200);
my $bibtex;
my $label;

GetOptions (
    "h|help" => \$help,
    "man" => \$man,
    "n|dry" => \$dry,
    "v|verbose" => \$verbose,

    "sortBy:s" => \$sortBy,
    "sortOrder:s" => \$sortOrder,

    "id_list:s" => $id_list,
    "start:i" => $start,
    "max_results:i" => $max_results,

    "b|bibtex" => \$bibtex,
    "l|label:s" => \$label,
    ) or pod2usage(-verbose => 0);

($help) && do {
    pod2usage(-verbose => 1);
    exit;
};

($man) && do {
    pod2usage(-verbose => 2);
    exit;
};

sub entry2hsh($entry) {
    my %h;
    for (qw(id updated published title summary)) {
	$h{$_} = $entry->at($_)->text;
    }
    $h{'authors'} = $entry->find('author name')->map('text');
    $h{'category'} = $entry->find('category')->map(sub {$_->{'term'}});
    $h{'abs'} = $entry->at('link[type="text/html"]')->{'href'};
    $h{'pdf'} = $entry->at('link[type="application/pdf"]')->{'href'};
    return \%h;
}

sub hsh2bbtx($h,$label) {
    my $authors = $h->{'authors'}->join(', ');
    my $title = $h->{'title'};
    my $year = ($h->{'published'} =~ /^(\d*)/) && $1;
    my $id = $h->{'id'};
    $label//= ($id =~ /.*\/(.*)/) && $1;	
    my $msg = << "EOF";
\@misc{$label,
Author = {$authors},
Title = {$title},
Year = {$year},
note = {$id},
}
EOF
    return $msg;
}

my $ua = Mojo::UserAgent->new;
$ua = $ua->max_redirects(3);

my $baseURL="http://export.arxiv.org/api/query";
my %form=(
    search_query => join(" ", @ARGV),
    id_list => $id_list,
    start => $start,
    max_results => $max_results,
    sortBy => $sortBy,
    sortOrder => $sortOrder,
    );

my $tx = $ua->build_tx(GET => $baseURL =>
		       form => \%form);

($dry) && do {
    say Dumper($tx->req);
    exit;
};

my $res = $ua->start($tx)->res;

($verbose) && do {
    say Dumper($res);
    exit;
};

my $dom = $res->dom;
$dom->find('entry')->each(sub { say( ($bibtex) ? (hsh2bbtx(entry2hsh($_), $label)) : (Dumper(entry2hsh($_))) ) });

__END__

=head1 NAME

App::arxiv2bib - Extract bibliographic data from the arXiv API

=head1 SYNOPSIS

    arxiv2bib [options] [args]

    arxiv2bib au:author1 AND au:author2 AND ti:title

    arxiv2bib --bibtex au:author1 ANDNOT ti:title

=head1 DESCRIPTION

The C<script/arxiv2bib> executable provided by the distribution extracts bibliographic information using the L<arXiv API|https://arxiv.org/help/api/user-manual>.

=head1 INSTALLATION

Using L<cpanm|https://metacpan.org/dist/App-cpanminus/view/bin/cpanm>: clone this repo, C<cd> into it, and then:

    $ cpanm .

Manual install:

    $ perl Makefile.PL
    $ make
    $ make install

=head1 OPTIONS

    -h | --help         usage examples and a breakdown of options/arguments
         --man          full documentation
    -n | --dry          only dump the the Mojo request object your options have formed
    -v | --verbose      dump the entire Mojo response object you've received

=head1 ARGUMENTS

ti 	Title

au 	Author

abs 	Abstract

co 	Comment

jr 	Journal Reference

cat 	Subject Category

rn 	Report Number

id 	Id (use id_list instead)

all 	All of the above
